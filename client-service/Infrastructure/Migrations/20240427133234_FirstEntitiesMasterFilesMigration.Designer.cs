// <auto-generated />
using System;
using ClientService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClientService.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240427133234_FirstEntitiesMasterFilesMigration")]
    partial class FirstEntitiesMasterFilesMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientService.Domain.Entity.Barangay", b =>
                {
                    b.Property<Guid>("BarangayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarangayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityMunicipalityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BarangayId");

                    b.ToTable("BarangayMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Business", b =>
                {
                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessPermitNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BusinessSectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EconomicActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ExistingCapital")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("FoundingYear")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOperating")
                        .HasColumnType("bit");

                    b.Property<string>("LandLineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfStaff")
                        .HasColumnType("int");

                    b.Property<string>("TaxIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAssets")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("BusinessId");

                    b.HasIndex("BusinessSectorId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EconomicActivityId");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.BusinessSector", b =>
                {
                    b.Property<Guid>("BusinessSectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessSectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("BusinessSectorId");

                    b.ToTable("BusinessSectorMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.CityMunicipality", b =>
                {
                    b.Property<Guid>("CityMunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityMunicipalityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityMunicipalityId");

                    b.ToTable("CityMunicipalityMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchOfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EconomicActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MembershipStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MembershipTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OccupationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PrimaryIdentificationTypeExpiration")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PrimaryIdentificationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrimaryIdentificationTypeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientId");

                    b.HasIndex("ClientSourceId");

                    b.HasIndex("EconomicActivityId");

                    b.HasIndex("MembershipStatusId");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("PrimaryIdentificationTypeId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.ClientReference", b =>
                {
                    b.Property<Guid>("ClientReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientReferenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ClientReferenceId");

                    b.ToTable("ClientReferenceMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.ClientSource", b =>
                {
                    b.Property<Guid>("ClientSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ClientSourceId");

                    b.ToTable("ClientSourceMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CountryId");

                    b.ToTable("CountryMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Dependant", b =>
                {
                    b.Property<Guid>("DependantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessSectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DependantId");

                    b.HasIndex("BusinessSectorId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Dependant");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DependantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SpouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DependantId");

                    b.HasIndex("SpouseId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.EconomicActivity", b =>
                {
                    b.Property<Guid>("EconomicActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EconomicActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("EconomicActivityId");

                    b.ToTable("EconomicActivityMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.EducationalAttainment", b =>
                {
                    b.Property<Guid>("EducationalAttainmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationalAttainmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("EducationalAttainmentId");

                    b.ToTable("EducationalAttainmentMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.MembershipStatus", b =>
                {
                    b.Property<Guid>("MembershipStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MembershipStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MembershipStatusId");

                    b.ToTable("MembershipStatusMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.MembershipType", b =>
                {
                    b.Property<Guid>("MembershipTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MembershipTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MembershipTypeId");

                    b.ToTable("MembershipTypeMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Nationality", b =>
                {
                    b.Property<Guid>("NationalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NationalityId");

                    b.ToTable("NationalityMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Occupation", b =>
                {
                    b.Property<Guid>("OccupationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OccupationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OccupationId");

                    b.ToTable("OccupationMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("ChildrenBelow21")
                        .HasColumnType("int");

                    b.Property<int?>("ChildrenInSchool")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DependantCount")
                        .HasColumnType("int");

                    b.Property<Guid>("EducationalAttainmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherMaidenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NationalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReligionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salutation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxPayerIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.HasIndex("EducationalAttainmentId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ReligionId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.PrimaryIdentificationType", b =>
                {
                    b.Property<Guid>("PrimaryIdentificationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PrimaryIdentificationTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrimaryIdentificationTypeId");

                    b.ToTable("PrimaryIdentificationTypeMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Province", b =>
                {
                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("ProvinceMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Region", b =>
                {
                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("RegionMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Religion", b =>
                {
                    b.Property<Guid>("ReligionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ReligionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReligionId");

                    b.ToTable("ReligionMasterFile");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Spouse", b =>
                {
                    b.Property<Guid>("SpouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessSectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MonthlyIncome")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("OccupationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpouseId");

                    b.HasIndex("BusinessSectorId");

                    b.HasIndex("ClientId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Spouse");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Business", b =>
                {
                    b.HasOne("ClientService.Domain.Entity.BusinessSector", "BusinessSector")
                        .WithMany()
                        .HasForeignKey("BusinessSectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.Client", "MyClient")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.EconomicActivity", "EconomicActivity")
                        .WithMany()
                        .HasForeignKey("EconomicActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ClientService.Domain.ValueObjects.BusinessAddress", "BusinessAddress", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Barangay1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HouseNumber1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Latitude1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Longitude1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Region1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Business");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsOne("ClientService.Domain.ValueObjects.Income", "BusinessIncome", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("AnnualGrossIncome")
                                .HasColumnType("decimal(18, 2)");

                            b1.Property<decimal>("MonthlyIncome")
                                .HasColumnType("decimal(18, 2)");

                            b1.Property<decimal>("WeeklyIncome")
                                .HasColumnType("decimal(18, 2)");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Business");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsOne("ClientService.Domain.ValueObjects.MicroFinanceEngagement", "MicroFinanceEngagement", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("MFIEngagement")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MFIEngagementName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("YearsOfMFIEngagementMembership")
                                .HasColumnType("int");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Business");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.Navigation("BusinessAddress")
                        .IsRequired();

                    b.Navigation("BusinessIncome")
                        .IsRequired();

                    b.Navigation("BusinessSector");

                    b.Navigation("EconomicActivity");

                    b.Navigation("MicroFinanceEngagement")
                        .IsRequired();

                    b.Navigation("MyClient");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Client", b =>
                {
                    b.HasOne("ClientService.Domain.Entity.ClientSource", "ClientSource")
                        .WithMany()
                        .HasForeignKey("ClientSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.EconomicActivity", "EconomicActivity")
                        .WithMany()
                        .HasForeignKey("EconomicActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.MembershipStatus", "MembershipStatus")
                        .WithMany()
                        .HasForeignKey("MembershipStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.MembershipType", "MembershipType")
                        .WithMany()
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.Person", "Person")
                        .WithOne()
                        .HasForeignKey("ClientService.Domain.Entity.Client", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.PrimaryIdentificationType", "PrimaryIdentification")
                        .WithMany()
                        .HasForeignKey("PrimaryIdentificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.ClientReference", "ClientReference")
                        .WithMany()
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ClientService.Domain.ValueObjects.AdditionalInformation", "AdditionalInformation", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bank")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BankAccountNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Notes")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("AdditionalInformation")
                        .IsRequired();

                    b.Navigation("ClientReference");

                    b.Navigation("ClientSource");

                    b.Navigation("EconomicActivity");

                    b.Navigation("MembershipStatus");

                    b.Navigation("MembershipType");

                    b.Navigation("Occupation");

                    b.Navigation("Person");

                    b.Navigation("PrimaryIdentification");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Dependant", b =>
                {
                    b.HasOne("ClientService.Domain.Entity.BusinessSector", "BusinessSector")
                        .WithMany()
                        .HasForeignKey("BusinessSectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.Person", "Person")
                        .WithOne()
                        .HasForeignKey("ClientService.Domain.Entity.Dependant", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessSector");

                    b.Navigation("Client");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Document", b =>
                {
                    b.HasOne("ClientService.Domain.Entity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClientService.Domain.Entity.Dependant", "Dependant")
                        .WithMany()
                        .HasForeignKey("DependantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClientService.Domain.Entity.Spouse", "Spouse")
                        .WithMany()
                        .HasForeignKey("SpouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Dependant");

                    b.Navigation("Spouse");
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Person", b =>
                {
                    b.HasOne("ClientService.Domain.Entity.EducationalAttainment", "EducationalAttainment")
                        .WithMany()
                        .HasForeignKey("EducationalAttainmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.Religion", "ClientReligion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ClientService.Domain.ValueObjects.Address", "PersonAddress", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Barangay1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Barangay2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HomeOwnership1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HomeOwnership2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HouseNumber1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HouseNumber2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Latitude1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Latitude2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Longitude1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Longitude2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Region1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Region2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("ClientService.Domain.ValueObjects.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ContactPersonMobileNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ContactPersonName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MobileNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("ClientReligion");

                    b.Navigation("ContactDetails")
                        .IsRequired();

                    b.Navigation("EducationalAttainment");

                    b.Navigation("Nationality");

                    b.Navigation("PersonAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("ClientService.Domain.Entity.Spouse", b =>
                {
                    b.HasOne("ClientService.Domain.Entity.BusinessSector", "BusinessSector")
                        .WithMany()
                        .HasForeignKey("BusinessSectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientService.Domain.Entity.Person", "Person")
                        .WithOne()
                        .HasForeignKey("ClientService.Domain.Entity.Spouse", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessSector");

                    b.Navigation("Client");

                    b.Navigation("Occupation");

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
